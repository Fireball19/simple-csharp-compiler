/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.analysis;

import sablecc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAUsingForm(AUsingForm node);
    void caseANamespaceForm(ANamespaceForm node);
    void caseAClassCForm(AClassCForm node);
    void caseAMainForm(AMainForm node);
    void caseAParameter(AParameter node);
    void caseAMethod(AMethod node);
    void caseAVoidReturnType(AVoidReturnType node);
    void caseAIntReturnType(AIntReturnType node);
    void caseADoubleReturnType(ADoubleReturnType node);
    void caseAStringReturnType(AStringReturnType node);
    void caseABoolReturnType(ABoolReturnType node);
    void caseAIntType(AIntType node);
    void caseADoubleType(ADoubleType node);
    void caseAStringType(AStringType node);
    void caseABoolType(ABoolType node);
    void caseADeclarationVariable(ADeclarationVariable node);
    void caseAInitializationVariable(AInitializationVariable node);
    void caseAIntLiteral(AIntLiteral node);
    void caseADoubleLiteral(ADoubleLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseABoolLiteral(ABoolLiteral node);
    void caseALogicalOrExpression(ALogicalOrExpression node);
    void caseALogicalAndExpression(ALogicalAndExpression node);
    void caseACmpNotEqualsExpression(ACmpNotEqualsExpression node);
    void caseACmpEqualsExpression(ACmpEqualsExpression node);
    void caseACmpSmallerExpression(ACmpSmallerExpression node);
    void caseACmpGreaterExpression(ACmpGreaterExpression node);
    void caseACmpEqualsSmallerExpression(ACmpEqualsSmallerExpression node);
    void caseACmpEqualsGreaterExpression(ACmpEqualsGreaterExpression node);
    void caseASubExpression(ASubExpression node);
    void caseAAddExpression(AAddExpression node);
    void caseAModExpression(AModExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseANotExpression(ANotExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAPlusExpression(APlusExpression node);
    void caseAParenthesisExpression(AParenthesisExpression node);
    void caseAFunctionExpression(AFunctionExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseALiteralExpression(ALiteralExpression node);
    void caseABlockStatement(ABlockStatement node);
    void caseAWriteLineStatement(AWriteLineStatement node);
    void caseACallStatement(ACallStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAVariableAssignmentStatement(AVariableAssignmentStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAEmptyStatement(AEmptyStatement node);

    void caseTUsingSymbol(TUsingSymbol node);
    void caseTNamespaceSymbol(TNamespaceSymbol node);
    void caseTClassSymbol(TClassSymbol node);
    void caseTPublicSymbol(TPublicSymbol node);
    void caseTStaticSymbol(TStaticSymbol node);
    void caseTReturnSymbol(TReturnSymbol node);
    void caseTMainSymbol(TMainSymbol node);
    void caseTConsoleSymbol(TConsoleSymbol node);
    void caseTWriteLineSymbol(TWriteLineSymbol node);
    void caseTArgsSymbol(TArgsSymbol node);
    void caseTVoidSymbol(TVoidSymbol node);
    void caseTIntSymbol(TIntSymbol node);
    void caseTDoubleSymbol(TDoubleSymbol node);
    void caseTStringSymbol(TStringSymbol node);
    void caseTBoolSymbol(TBoolSymbol node);
    void caseTIfSymbol(TIfSymbol node);
    void caseTElseSymbol(TElseSymbol node);
    void caseTWhileSymbol(TWhileSymbol node);
    void caseTCommentSingleLine(TCommentSingleLine node);
    void caseTCommentMultipleLines(TCommentMultipleLines node);
    void caseTIntLiteral(TIntLiteral node);
    void caseTDoubleLiteral(TDoubleLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTBoolLiteral(TBoolLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseTLine(TLine node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTEquals(TEquals node);
    void caseTCmpEquals(TCmpEquals node);
    void caseTCmpSmaller(TCmpSmaller node);
    void caseTCmpGreater(TCmpGreater node);
    void caseTCmpEqualsSmaller(TCmpEqualsSmaller node);
    void caseTCmpEqualsGreater(TCmpEqualsGreater node);
    void caseTCmpNotEquals(TCmpNotEquals node);
    void caseTLogicalOr(TLogicalOr node);
    void caseTLogicalAnd(TLogicalAnd node);
    void caseTLogicalNot(TLogicalNot node);
    void caseTLeftBrace(TLeftBrace node);
    void caseTRightBrace(TRightBrace node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTLeftParenthesis(TLeftParenthesis node);
    void caseTRightParenthesis(TRightParenthesis node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTDot(TDot node);
    void caseTWhiteSpaces(TWhiteSpaces node);
    void caseTTabs(TTabs node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
