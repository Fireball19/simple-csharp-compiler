/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.analysis;

import java.util.*;
import sablecc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUsingForm(AUsingForm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamespaceForm(ANamespaceForm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassCForm(AClassCForm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMainForm(AMainForm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethod(AMethod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidReturnType(AVoidReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntReturnType(AIntReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleReturnType(ADoubleReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringReturnType(AStringReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolReturnType(ABoolReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleType(ADoubleType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationVariable(ADeclarationVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInitializationVariable(AInitializationVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntLiteral(AIntLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleLiteral(ADoubleLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolLiteral(ABoolLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalOrExpression(ALogicalOrExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalAndExpression(ALogicalAndExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmpNotEqualsExpression(ACmpNotEqualsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmpEqualsExpression(ACmpEqualsExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmpSmallerExpression(ACmpSmallerExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmpGreaterExpression(ACmpGreaterExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmpEqualsSmallerExpression(ACmpEqualsSmallerExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACmpEqualsGreaterExpression(ACmpEqualsGreaterExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubExpression(ASubExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExpression(AModExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpression(ADivExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExpression(AMultExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExpression(ANotExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpression(APlusExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesisExpression(AParenthesisExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionExpression(AFunctionExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralExpression(ALiteralExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWriteLineStatement(AWriteLineStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStatement(ACallStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableAssignmentStatement(AVariableAssignmentStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUsingSymbol(TUsingSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNamespaceSymbol(TNamespaceSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClassSymbol(TClassSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublicSymbol(TPublicSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStaticSymbol(TStaticSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturnSymbol(TReturnSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMainSymbol(TMainSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsoleSymbol(TConsoleSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWriteLineSymbol(TWriteLineSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArgsSymbol(TArgsSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoidSymbol(TVoidSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntSymbol(TIntSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleSymbol(TDoubleSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringSymbol(TStringSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolSymbol(TBoolSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIfSymbol(TIfSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElseSymbol(TElseSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhileSymbol(TWhileSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentSingleLine(TCommentSingleLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentMultipleLines(TCommentMultipleLines node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntLiteral(TIntLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleLiteral(TDoubleLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolLiteral(TBoolLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLine(TLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCmpEquals(TCmpEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCmpSmaller(TCmpSmaller node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCmpGreater(TCmpGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCmpEqualsSmaller(TCmpEqualsSmaller node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCmpEqualsGreater(TCmpEqualsGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCmpNotEquals(TCmpNotEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalOr(TLogicalOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalAnd(TLogicalAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalNot(TLogicalNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBrace(TLeftBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBrace(TRightBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBracket(TLeftBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBracket(TRightBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftParenthesis(TLeftParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightParenthesis(TRightParenthesis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpaces(TWhiteSpaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTabs(TTabs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
