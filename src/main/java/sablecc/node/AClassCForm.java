/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import java.util.*;
import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AClassCForm extends PForm
{
    private PForm _form_;
    private final LinkedList<PMethod> _methodDefinitions_ = new LinkedList<PMethod>();

    public AClassCForm()
    {
        // Constructor
    }

    public AClassCForm(
        @SuppressWarnings("hiding") PForm _form_,
        @SuppressWarnings("hiding") List<?> _methodDefinitions_)
    {
        // Constructor
        setForm(_form_);

        setMethodDefinitions(_methodDefinitions_);

    }

    @Override
    public Object clone()
    {
        return new AClassCForm(
            cloneNode(this._form_),
            cloneList(this._methodDefinitions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassCForm(this);
    }

    public PForm getForm()
    {
        return this._form_;
    }

    public void setForm(PForm node)
    {
        if(this._form_ != null)
        {
            this._form_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._form_ = node;
    }

    public LinkedList<PMethod> getMethodDefinitions()
    {
        return this._methodDefinitions_;
    }

    public void setMethodDefinitions(List<?> list)
    {
        for(PMethod e : this._methodDefinitions_)
        {
            e.parent(null);
        }
        this._methodDefinitions_.clear();

        for(Object obj_e : list)
        {
            PMethod e = (PMethod) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methodDefinitions_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._form_)
            + toString(this._methodDefinitions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._form_ == child)
        {
            this._form_ = null;
            return;
        }

        if(this._methodDefinitions_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._form_ == oldChild)
        {
            setForm((PForm) newChild);
            return;
        }

        for(ListIterator<PMethod> i = this._methodDefinitions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethod) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
