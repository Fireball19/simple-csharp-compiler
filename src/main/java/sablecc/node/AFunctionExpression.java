/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.node;

import java.util.*;
import sablecc.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionExpression extends PExpression
{
    private PExpression _function_;
    private final LinkedList<PExpression> _parameters_ = new LinkedList<PExpression>();

    public AFunctionExpression()
    {
        // Constructor
    }

    public AFunctionExpression(
        @SuppressWarnings("hiding") PExpression _function_,
        @SuppressWarnings("hiding") List<?> _parameters_)
    {
        // Constructor
        setFunction(_function_);

        setParameters(_parameters_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionExpression(
            cloneNode(this._function_),
            cloneList(this._parameters_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionExpression(this);
    }

    public PExpression getFunction()
    {
        return this._function_;
    }

    public void setFunction(PExpression node)
    {
        if(this._function_ != null)
        {
            this._function_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._function_ = node;
    }

    public LinkedList<PExpression> getParameters()
    {
        return this._parameters_;
    }

    public void setParameters(List<?> list)
    {
        for(PExpression e : this._parameters_)
        {
            e.parent(null);
        }
        this._parameters_.clear();

        for(Object obj_e : list)
        {
            PExpression e = (PExpression) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._parameters_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._function_)
            + toString(this._parameters_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._function_ == child)
        {
            this._function_ = null;
            return;
        }

        if(this._parameters_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._function_ == oldChild)
        {
            setFunction((PExpression) newChild);
            return;
        }

        for(ListIterator<PExpression> i = this._parameters_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpression) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
