/* This file was generated by SableCC (http://www.sablecc.org/). */

package sablecc.parser;

import sablecc.lexer.*;
import sablecc.node.*;
import sablecc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PForm node1 = (PForm) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AUsing */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ANamespace */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAclassc1ClassC */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AAclassc2ClassC */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AAmain1Main */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AAmain2Main */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AAmain3Main */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAmain4Main */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AIntLiteral */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce ADoubleLiteral */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AStringLiteral */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce ABoolLiteral */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AIntType */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ADoubleType */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AStringType */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ABoolType */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AVoidReturnType */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AIntReturnType */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce ADoubleReturnType */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AStringReturnType */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list);
            }
            break;
            case 20: /* reduce ABoolReturnType */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list);
            }
            break;
            case 21: /* reduce ADeclarationVariable */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list);
            }
            break;
            case 22: /* reduce AInitializationVariable */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list);
            }
            break;
            case 23: /* reduce AAmethod1Method */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce AAmethod2Method */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce AAmethod3Method */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AAmethod4Method */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AAmethod5Method */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AAmethod6Method */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list);
            }
            break;
            case 29: /* reduce AAmethod7Method */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list);
            }
            break;
            case 30: /* reduce AAmethod8Method */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list);
            }
            break;
            case 31: /* reduce AParameter */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list);
            }
            break;
            case 32: /* reduce ASingleParameters */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list);
            }
            break;
            case 33: /* reduce AMultipleParameters */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list);
            }
            break;
            case 34: /* reduce ASingleExpressionArguments */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list);
            }
            break;
            case 35: /* reduce AMultipleExpressionArguments */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list);
            }
            break;
            case 36: /* reduce AIdentifierPrimaryExpression */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list);
            }
            break;
            case 37: /* reduce ALiteralPrimaryExpression */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list);
            }
            break;
            case 38: /* reduce AParenthesisPrimaryExpression */
            {
                ArrayList<Object> list = new38();
                push(goTo(12), list);
            }
            break;
            case 39: /* reduce APrimaryFunctionExpression */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list);
            }
            break;
            case 40: /* reduce AAfunctionfunctionexpression1FunctionExpression */
            {
                ArrayList<Object> list = new40();
                push(goTo(13), list);
            }
            break;
            case 41: /* reduce AAfunctionfunctionexpression2FunctionExpression */
            {
                ArrayList<Object> list = new41();
                push(goTo(13), list);
            }
            break;
            case 42: /* reduce AFunctionUnaryExpression */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list);
            }
            break;
            case 43: /* reduce APlusUnaryExpression */
            {
                ArrayList<Object> list = new43();
                push(goTo(14), list);
            }
            break;
            case 44: /* reduce AMinusUnaryExpression */
            {
                ArrayList<Object> list = new44();
                push(goTo(14), list);
            }
            break;
            case 45: /* reduce ANotUnaryExpression */
            {
                ArrayList<Object> list = new45();
                push(goTo(14), list);
            }
            break;
            case 46: /* reduce AUnaryMultiplicativeExpression */
            {
                ArrayList<Object> list = new46();
                push(goTo(15), list);
            }
            break;
            case 47: /* reduce AMultMultiplicativeExpression */
            {
                ArrayList<Object> list = new47();
                push(goTo(15), list);
            }
            break;
            case 48: /* reduce ADivMultiplicativeExpression */
            {
                ArrayList<Object> list = new48();
                push(goTo(15), list);
            }
            break;
            case 49: /* reduce AModMultiplicativeExpression */
            {
                ArrayList<Object> list = new49();
                push(goTo(15), list);
            }
            break;
            case 50: /* reduce AMultiplicativeAdditiveExpression */
            {
                ArrayList<Object> list = new50();
                push(goTo(16), list);
            }
            break;
            case 51: /* reduce AAddAdditiveExpression */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list);
            }
            break;
            case 52: /* reduce ASubAdditiveExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(16), list);
            }
            break;
            case 53: /* reduce AAdditiveComparisonExpression */
            {
                ArrayList<Object> list = new53();
                push(goTo(17), list);
            }
            break;
            case 54: /* reduce ACmpSmallerComparisonExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(17), list);
            }
            break;
            case 55: /* reduce ACmpGreaterComparisonExpression */
            {
                ArrayList<Object> list = new55();
                push(goTo(17), list);
            }
            break;
            case 56: /* reduce ACmpEqualsSmallerComparisonExpression */
            {
                ArrayList<Object> list = new56();
                push(goTo(17), list);
            }
            break;
            case 57: /* reduce ACmpEqualsGreaterComparisonExpression */
            {
                ArrayList<Object> list = new57();
                push(goTo(17), list);
            }
            break;
            case 58: /* reduce AComparisonEqualityExpression */
            {
                ArrayList<Object> list = new58();
                push(goTo(18), list);
            }
            break;
            case 59: /* reduce ACmpNotEqualsEqualityExpression */
            {
                ArrayList<Object> list = new59();
                push(goTo(18), list);
            }
            break;
            case 60: /* reduce ACmpEqualsEqualityExpression */
            {
                ArrayList<Object> list = new60();
                push(goTo(18), list);
            }
            break;
            case 61: /* reduce AEqualityLogicalAndExpression */
            {
                ArrayList<Object> list = new61();
                push(goTo(19), list);
            }
            break;
            case 62: /* reduce ALogicalAndLogicalAndExpression */
            {
                ArrayList<Object> list = new62();
                push(goTo(19), list);
            }
            break;
            case 63: /* reduce ALogicalAndLogicalOrExpression */
            {
                ArrayList<Object> list = new63();
                push(goTo(20), list);
            }
            break;
            case 64: /* reduce ALogicalOrLogicalOrExpression */
            {
                ArrayList<Object> list = new64();
                push(goTo(20), list);
            }
            break;
            case 65: /* reduce AAwriteline1WriteLine */
            {
                ArrayList<Object> list = new65();
                push(goTo(21), list);
            }
            break;
            case 66: /* reduce AAwriteline2WriteLine */
            {
                ArrayList<Object> list = new66();
                push(goTo(21), list);
            }
            break;
            case 67: /* reduce AAreturn1Return */
            {
                ArrayList<Object> list = new67();
                push(goTo(22), list);
            }
            break;
            case 68: /* reduce AAreturn2Return */
            {
                ArrayList<Object> list = new68();
                push(goTo(22), list);
            }
            break;
            case 69: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list);
            }
            break;
            case 70: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new70();
                push(goTo(23), list);
            }
            break;
            case 71: /* reduce AVariableAssignment */
            {
                ArrayList<Object> list = new71();
                push(goTo(24), list);
            }
            break;
            case 72: /* reduce AExpressionStatement */
            {
                ArrayList<Object> list = new72();
                push(goTo(25), list);
            }
            break;
            case 73: /* reduce AEmptyOtherStatement */
            {
                ArrayList<Object> list = new73();
                push(goTo(26), list);
            }
            break;
            case 74: /* reduce AAssignmentOtherStatement */
            {
                ArrayList<Object> list = new74();
                push(goTo(26), list);
            }
            break;
            case 75: /* reduce ABlockOtherStatement */
            {
                ArrayList<Object> list = new75();
                push(goTo(26), list);
            }
            break;
            case 76: /* reduce ACallOtherStatement */
            {
                ArrayList<Object> list = new76();
                push(goTo(26), list);
            }
            break;
            case 77: /* reduce AWriteLineOtherStatement */
            {
                ArrayList<Object> list = new77();
                push(goTo(26), list);
            }
            break;
            case 78: /* reduce AReturnOtherStatement */
            {
                ArrayList<Object> list = new78();
                push(goTo(26), list);
            }
            break;
            case 79: /* reduce AOtherStatementStatement */
            {
                ArrayList<Object> list = new79();
                push(goTo(27), list);
            }
            break;
            case 80: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new80();
                push(goTo(27), list);
            }
            break;
            case 81: /* reduce AIfElseStatement */
            {
                ArrayList<Object> list = new81();
                push(goTo(27), list);
            }
            break;
            case 82: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new82();
                push(goTo(27), list);
            }
            break;
            case 83: /* reduce AOtherStatementEmbeddedStatementNoIf */
            {
                ArrayList<Object> list = new83();
                push(goTo(28), list);
            }
            break;
            case 84: /* reduce AIfElseEmbeddedStatementNoIf */
            {
                ArrayList<Object> list = new84();
                push(goTo(28), list);
            }
            break;
            case 85: /* reduce AWhileEmbeddedStatementNoIf */
            {
                ArrayList<Object> list = new85();
                push(goTo(28), list);
            }
            break;
            case 86: /* reduce AIf */
            {
                ArrayList<Object> list = new86();
                push(goTo(29), list);
            }
            break;
            case 87: /* reduce AIfElse */
            {
                ArrayList<Object> list = new87();
                push(goTo(30), list);
            }
            break;
            case 88: /* reduce AIfElseNoIf */
            {
                ArrayList<Object> list = new88();
                push(goTo(31), list);
            }
            break;
            case 89: /* reduce AWhile */
            {
                ArrayList<Object> list = new89();
                push(goTo(32), list);
            }
            break;
            case 90: /* reduce AWhileNoIf */
            {
                ArrayList<Object> list = new90();
                push(goTo(33), list);
            }
            break;
            case 91: /* reduce ATerminal$Method */
            {
                ArrayList<Object> list = new91();
                push(goTo(34), list);
            }
            break;
            case 92: /* reduce ANonTerminal$Method */
            {
                ArrayList<Object> list = new92();
                push(goTo(34), list);
            }
            break;
            case 93: /* reduce ATerminal$Variable */
            {
                ArrayList<Object> list = new93();
                push(goTo(35), list);
            }
            break;
            case 94: /* reduce ANonTerminal$Variable */
            {
                ArrayList<Object> list = new94();
                push(goTo(35), list);
            }
            break;
            case 95: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new95();
                push(goTo(36), list);
            }
            break;
            case 96: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new96();
                push(goTo(36), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AUsing */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        PForm pformNode2;
        pformNode2 = (PForm)nodeArrayList4.get(0);

        pformNode1 = new AUsingForm(pformNode2);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ANamespace */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        PForm pformNode2;
        pformNode2 = (PForm)nodeArrayList4.get(0);

        pformNode1 = new ANamespaceForm(pformNode2);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAclassc1ClassC */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        PForm pformNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pformNode2 = (PForm)nodeArrayList4.get(0);
        {
            // Block
        }

        pformNode1 = new AClassCForm(pformNode2, listNode3);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAclassc2ClassC */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        PForm pformNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pformNode2 = (PForm)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pformNode1 = new AClassCForm(pformNode2, listNode4);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAmain1Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pformNode1 = new AMainForm(listNode2, listNode3);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAmain2Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList11.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pformNode1 = new AMainForm(listNode3, listNode4);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAmain3Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList11.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pformNode1 = new AMainForm(listNode2, listNode4);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAmain4Main */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PForm pformNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList11.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList12.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pformNode1 = new AMainForm(listNode3, listNode5);
        }
	nodeList.add(pformNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIntLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIntLiteral tintliteralNode2;
        tintliteralNode2 = (TIntLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AIntLiteral(tintliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADoubleLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TDoubleLiteral tdoubleliteralNode2;
        tdoubleliteralNode2 = (TDoubleLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ADoubleLiteral(tdoubleliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(tstringliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ABoolLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TBoolLiteral tboolliteralNode2;
        tboolliteralNode2 = (TBoolLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ABoolLiteral(tboolliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AIntType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADoubleType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ADoubleType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new AStringType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ABoolType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVoidReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block

        preturntypeNode1 = new AVoidReturnType();
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIntReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block

        preturntypeNode1 = new AIntReturnType();
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADoubleReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block

        preturntypeNode1 = new ADoubleReturnType();
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AStringReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block

        preturntypeNode1 = new AStringReturnType();
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ABoolReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block

        preturntypeNode1 = new ABoolReturnType();
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADeclarationVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvariableNode1 = new ADeclarationVariable(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AInitializationVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        PExpression pexpressionNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList4.get(0);

        pvariableNode1 = new AInitializationVariable(ptypeNode2, tidentifierNode3, pexpressionNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAmethod1Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode4, listNode5, listNode6);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethod2Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode5, listNode6, listNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAmethod3Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode4, listNode6, listNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmethod4Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode5, listNode7, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmethod5Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode4, listNode5, listNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAmethod6Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode5, listNode6, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAmethod7Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode4, listNode6, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAmethod8Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PReturnType preturntypeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        preturntypeNode3 = (PReturnType)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pmethodNode1 = new AMethod(tidentifierNode2, preturntypeNode3, listNode5, listNode7, listNode9);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASingleParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParameter pparameterNode1;
        pparameterNode1 = (PParameter)nodeArrayList1.get(0);
	if(pparameterNode1 != null)
	{
	  listNode2.add(pparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMultipleParameters */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParameter pparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterNode2 = (PParameter)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterNode2 != null)
	{
	  listNode3.add(pparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASingleExpressionArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AMultipleExpressionArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AIdentifierPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALiteralPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new ALiteralExpression(pliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AParenthesisPrimaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AParenthesisExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce APrimaryFunctionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAfunctionfunctionexpression1FunctionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AFunctionExpression(pexpressionNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAfunctionfunctionexpression2FunctionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AFunctionExpression(pexpressionNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AFunctionUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce APlusUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new APlusExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMinusUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANotUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AUnaryMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADivMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AModMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AModExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMultiplicativeAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAddAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAddExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ASubAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAdditiveComparisonExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ACmpSmallerComparisonExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACmpSmallerExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACmpGreaterComparisonExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACmpGreaterExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ACmpEqualsSmallerComparisonExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACmpEqualsSmallerExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACmpEqualsGreaterComparisonExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACmpEqualsGreaterExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AComparisonEqualityExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ACmpNotEqualsEqualityExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACmpNotEqualsExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ACmpEqualsEqualityExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACmpEqualsExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AEqualityLogicalAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ALogicalAndLogicalAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALogicalAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ALogicalAndLogicalOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ALogicalOrLogicalOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALogicalOrExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAwriteline1WriteLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstatementNode1 = new AWriteLineStatement(null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAwriteline2WriteLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList5.get(0);

        pstatementNode1 = new AWriteLineStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAreturn1Return */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstatementNode1 = new AReturnStatement(null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAreturn2Return */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pstatementNode1 = new ABlockStatement(listNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AVariableAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AVariableAssignmentStatement(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AExpressionStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pstatementNode1 = new ACallStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AEmptyOtherStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AEmptyStatement();
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAssignmentOtherStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ABlockOtherStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ACallOtherStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AWriteLineOtherStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AReturnOtherStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AOtherStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AIfElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AOtherStatementEmbeddedStatementNoIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AIfElseEmbeddedStatementNoIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AWhileEmbeddedStatementNoIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PStatement pstatementNode3;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pexpressionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfElseStatement(pexpressionNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AIfElseNoIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfElseStatement(pexpressionNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AWhile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PStatement pstatementNode3;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpressionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AWhileNoIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PStatement pstatementNode3;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpressionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ATerminal$Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethod pmethodNode1;
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
	if(pmethodNode1 != null)
	{
	  listNode2.add(pmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANonTerminal$Method */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethod pmethodNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethodNode2 = (PMethod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethodNode2 != null)
	{
	  listNode3.add(pmethodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariable pvariableNode1;
        pvariableNode1 = (PVariable)nodeArrayList1.get(0);
	if(pvariableNode1 != null)
	{
	  listNode2.add(pvariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANonTerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariable pvariableNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariableNode2 = (PVariable)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariableNode2 != null)
	{
	  listNode3.add(pvariableNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {22, SHIFT, 3}, },
			{{-1, ERROR, 2}, {47, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {45, SHIFT, 4}, },
			{{-1, ERROR, 4}, {1, SHIFT, 5}, },
			{{-1, ERROR, 5}, {22, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 7}, {38, SHIFT, 8}, },
			{{-1, ERROR, 8}, {2, SHIFT, 9}, },
			{{-1, ERROR, 9}, {22, SHIFT, 11}, },
			{{-1, ERROR, 10}, {39, SHIFT, 12}, },
			{{-1, ERROR, 11}, {38, SHIFT, 13}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 13}, {4, SHIFT, 14}, },
			{{-1, ERROR, 14}, {10, SHIFT, 16}, },
			{{-1, ERROR, 15}, {4, SHIFT, 17}, {39, SHIFT, 18}, },
			{{-1, ERROR, 16}, {6, SHIFT, 21}, },
			{{-1, ERROR, 17}, {10, SHIFT, 22}, {11, SHIFT, 23}, {12, SHIFT, 24}, {13, SHIFT, 25}, {14, SHIFT, 26}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 20}, {4, SHIFT, 17}, {39, SHIFT, 28}, },
			{{-1, ERROR, 21}, {42, SHIFT, 30}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 27}, {22, SHIFT, 31}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 30}, {13, SHIFT, 32}, },
			{{-1, ERROR, 31}, {42, SHIFT, 33}, },
			{{-1, ERROR, 32}, {40, SHIFT, 34}, },
			{{-1, ERROR, 33}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, {43, SHIFT, 39}, },
			{{-1, ERROR, 34}, {41, SHIFT, 43}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 39}, {38, SHIFT, 44}, },
			{{-1, ERROR, 40}, {22, SHIFT, 45}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 42}, {43, SHIFT, 46}, {44, SHIFT, 47}, },
			{{-1, ERROR, 43}, {9, SHIFT, 48}, },
			{{-1, ERROR, 44}, {5, SHIFT, 49}, {7, SHIFT, 50}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 62}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 46}, {38, SHIFT, 89}, },
			{{-1, ERROR, 47}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, },
			{{-1, ERROR, 48}, {43, SHIFT, 91}, },
			{{-1, ERROR, 49}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, {45, SHIFT, 93}, },
			{{-1, ERROR, 50}, {46, SHIFT, 95}, },
			{{-1, ERROR, 51}, {42, SHIFT, 96}, },
			{{-1, ERROR, 52}, {42, SHIFT, 97}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 36}, {28, SHIFT, 98}, },
			{{-1, ERROR, 58}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 59}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 60}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 61}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 102}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 63}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 66}, {22, SHIFT, 105}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 42}, {42, SHIFT, 106}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 50}, {25, SHIFT, 107}, {26, SHIFT, 108}, {27, SHIFT, 109}, },
			{{-1, REDUCE, 53}, {23, SHIFT, 110}, {24, SHIFT, 111}, },
			{{-1, REDUCE, 58}, {30, SHIFT, 112}, {31, SHIFT, 113}, {32, SHIFT, 114}, {33, SHIFT, 115}, },
			{{-1, REDUCE, 61}, {29, SHIFT, 116}, {34, SHIFT, 117}, },
			{{-1, REDUCE, 63}, {36, SHIFT, 118}, },
			{{-1, ERROR, 76}, {35, SHIFT, 119}, {45, SHIFT, 120}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 87}, {5, SHIFT, 49}, {7, SHIFT, 50}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 121}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 88}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 124}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 89}, {5, SHIFT, 49}, {7, SHIFT, 50}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 126}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 91}, {38, SHIFT, 129}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 94}, {35, SHIFT, 119}, {45, SHIFT, 130}, },
			{{-1, ERROR, 95}, {8, SHIFT, 131}, },
			{{-1, ERROR, 96}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 97}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 98}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 103}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 135}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 104}, {35, SHIFT, 119}, {43, SHIFT, 136}, },
			{{-1, ERROR, 105}, {28, SHIFT, 137}, {45, SHIFT, 138}, },
			{{-1, ERROR, 106}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, {43, SHIFT, 139}, },
			{{-1, ERROR, 107}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 108}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 109}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 110}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 111}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 112}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 113}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 114}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 115}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 116}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 117}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 118}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 119}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 123}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 155}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 127}, {5, SHIFT, 49}, {7, SHIFT, 50}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 156}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 128}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 158}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 129}, {5, SHIFT, 49}, {7, SHIFT, 50}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 159}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 131}, {42, SHIFT, 162}, },
			{{-1, ERROR, 132}, {35, SHIFT, 119}, {43, SHIFT, 163}, },
			{{-1, ERROR, 133}, {35, SHIFT, 119}, {43, SHIFT, 164}, },
			{{-1, ERROR, 134}, {35, SHIFT, 119}, {45, SHIFT, 165}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 137}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 140}, {43, SHIFT, 167}, {44, SHIFT, 168}, },
			{{-1, REDUCE, 34}, {35, SHIFT, 119}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 51}, {25, SHIFT, 107}, {26, SHIFT, 108}, {27, SHIFT, 109}, },
			{{-1, REDUCE, 52}, {25, SHIFT, 107}, {26, SHIFT, 108}, {27, SHIFT, 109}, },
			{{-1, REDUCE, 54}, {23, SHIFT, 110}, {24, SHIFT, 111}, },
			{{-1, REDUCE, 55}, {23, SHIFT, 110}, {24, SHIFT, 111}, },
			{{-1, REDUCE, 56}, {23, SHIFT, 110}, {24, SHIFT, 111}, },
			{{-1, REDUCE, 57}, {23, SHIFT, 110}, {24, SHIFT, 111}, },
			{{-1, REDUCE, 60}, {30, SHIFT, 112}, {31, SHIFT, 113}, {32, SHIFT, 114}, {33, SHIFT, 115}, },
			{{-1, REDUCE, 59}, {30, SHIFT, 112}, {31, SHIFT, 113}, {32, SHIFT, 114}, {33, SHIFT, 115}, },
			{{-1, REDUCE, 62}, {29, SHIFT, 116}, {34, SHIFT, 117}, },
			{{-1, REDUCE, 64}, {36, SHIFT, 118}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 157}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 169}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 160}, {5, SHIFT, 49}, {7, SHIFT, 50}, {11, SHIFT, 35}, {12, SHIFT, 36}, {13, SHIFT, 37}, {14, SHIFT, 38}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 170}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 161}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 172}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 162}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, {43, SHIFT, 173}, },
			{{-1, ERROR, 163}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 175}, {17, SHIFT, 176}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 164}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 166}, {35, SHIFT, 119}, {45, SHIFT, 183}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 168}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 171}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {39, SHIFT, 185}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 173}, {45, SHIFT, 186}, },
			{{-1, ERROR, 174}, {35, SHIFT, 119}, {43, SHIFT, 187}, },
			{{-1, ERROR, 175}, {42, SHIFT, 188}, },
			{{-1, ERROR, 176}, {42, SHIFT, 189}, },
			{{-1, REDUCE, 79}, {16, REDUCE, 83}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 179}, {16, SHIFT, 190}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 35}, {35, SHIFT, 119}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 187}, {45, SHIFT, 191}, },
			{{-1, ERROR, 188}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 189}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 92}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {42, SHIFT, 63}, },
			{{-1, ERROR, 190}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 51}, {17, SHIFT, 52}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 192}, {35, SHIFT, 119}, {43, SHIFT, 195}, },
			{{-1, ERROR, 193}, {35, SHIFT, 119}, {43, SHIFT, 196}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 195}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 175}, {17, SHIFT, 176}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 196}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 175}, {17, SHIFT, 176}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, ERROR, 197}, {16, SHIFT, 199}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 199}, {5, SHIFT, 49}, {7, SHIFT, 50}, {15, SHIFT, 175}, {17, SHIFT, 176}, {18, SHIFT, 53}, {19, SHIFT, 54}, {20, SHIFT, 55}, {21, SHIFT, 56}, {22, SHIFT, 57}, {23, SHIFT, 58}, {24, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {42, SHIFT, 63}, {45, SHIFT, 64}, },
			{{-1, REDUCE, 88}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 6}, },
			{{-1, 10}, },
			{{-1, 15}, },
			{{-1, 65}, },
			{{-1, 66}, {33, 40}, {47, 40}, },
			{{-1, 27}, },
			{{-1, 67}, {87, 122}, {127, 122}, {160, 122}, },
			{{-1, 19}, {20, 29}, },
			{{-1, 41}, {47, 90}, },
			{{-1, 42}, },
			{{-1, 140}, },
			{{-1, 68}, },
			{{-1, 69}, },
			{{-1, 70}, {58, 99}, {59, 100}, {60, 101}, {107, 142}, {108, 143}, {109, 144}, },
			{{-1, 71}, {110, 145}, {111, 146}, },
			{{-1, 72}, {112, 147}, {113, 148}, {114, 149}, {115, 150}, },
			{{-1, 73}, {116, 151}, {117, 152}, },
			{{-1, 74}, {118, 153}, },
			{{-1, 75}, {119, 154}, },
			{{-1, 76}, {49, 94}, {63, 104}, {96, 132}, {97, 133}, {98, 134}, {106, 141}, {137, 166}, {162, 174}, {168, 184}, {188, 192}, {189, 193}, },
			{{-1, 77}, },
			{{-1, 78}, },
			{{-1, 79}, },
			{{-1, 80}, },
			{{-1, 81}, },
			{{-1, 82}, {163, 177}, {195, 177}, {196, 177}, {199, 177}, },
			{{-1, 83}, {88, 125}, {103, 125}, {123, 125}, {128, 125}, {157, 125}, {161, 125}, {163, 178}, {164, 182}, {171, 125}, {190, 194}, {195, 178}, {196, 182}, {199, 194}, },
			{{-1, 179}, {195, 197}, {196, 198}, {199, 200}, },
			{{-1, 84}, },
			{{-1, 85}, },
			{{-1, 180}, },
			{{-1, 86}, },
			{{-1, 181}, },
			{{-1, 20}, },
			{{-1, 87}, {89, 127}, {129, 160}, },
			{{-1, 88}, {61, 103}, {87, 123}, {89, 128}, {127, 157}, {129, 161}, {160, 171}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'using'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: 'namespace'",
			"expecting: '{'",
			"expecting: 'class'",
			"expecting: '}'",
			"expecting: 'static'",
			"expecting: 'void'",
			"expecting: 'static', '}'",
			"expecting: 'Main'",
			"expecting: 'void', 'int', 'double', 'string', 'bool'",
			"expecting: '('",
			"expecting: 'string'",
			"expecting: '['",
			"expecting: 'int', 'double', 'string', 'bool', ')'",
			"expecting: ']'",
			"expecting: ')', ','",
			"expecting: 'args'",
			"expecting: 'return', 'Console', 'int', 'double', 'string', 'bool', 'if', 'while', int literal, double literal, string literal, bool literal, identifier, '+', '-', '!', '{', '}', '(', ';'",
			"expecting: 'int', 'double', 'string', 'bool'",
			"expecting: ')'",
			"expecting: int literal, double literal, string literal, bool literal, identifier, '+', '-', '!', '(', ';'",
			"expecting: dot",
			"expecting: '+', '-', '*', '/', '%', '==', '<', '>', '<=', '>=', '!=', '||', '&&', '(', ')', ',', ';'",
			"expecting: '+', '-', '*', '/', '%', '=', '==', '<', '>', '<=', '>=', '!=', '||', '&&', '(', ';'",
			"expecting: int literal, double literal, string literal, bool literal, identifier, '+', '-', '!', '('",
			"expecting: 'return', 'Console', 'if', 'while', int literal, double literal, string literal, bool literal, identifier, '+', '-', '!', '{', '}', '(', ';'",
			"expecting: 'return', 'Console', 'if', 'else', 'while', int literal, double literal, string literal, bool literal, identifier, '+', '-', '!', '{', '}', '(', ';'",
			"expecting: '+', '-', '*', '/', '%', '==', '<', '>', '<=', '>=', '!=', '||', '&&', ')', ',', ';'",
			"expecting: '+', '-', '==', '<', '>', '<=', '>=', '!=', '||', '&&', ')', ',', ';'",
			"expecting: '==', '<', '>', '<=', '>=', '!=', '||', '&&', ')', ',', ';'",
			"expecting: '==', '!=', '||', '&&', ')', ',', ';'",
			"expecting: '||', '&&', ')', ',', ';'",
			"expecting: '||', ';'",
			"expecting: 'WriteLine'",
			"expecting: '||', ')'",
			"expecting: '=', ';'",
			"expecting: int literal, double literal, string literal, bool literal, identifier, '+', '-', '!', '(', ')'",
			"expecting: '||', ')', ','",
			"expecting: 'return', 'Console', 'if', 'while', int literal, double literal, string literal, bool literal, identifier, '+', '-', '!', '{', '(', ';'",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 2, 5, 6, 1, 7, 5, 2, 8, 9, 10, 11, 12, 7, 10, 10, 13, 1, 1, 1, 1, 1, 1, 7, 10, 14, 13, 15, 16, 17, 1, 1, 1, 1, 5, 1, 18, 18, 19, 20, 18, 5, 21, 22, 23, 24, 13, 13, 25, 25, 25, 25, 26, 27, 27, 27, 28, 10, 27, 29, 25, 1, 20, 25, 25, 30, 30, 31, 32, 33, 34, 35, 29, 29, 29, 29, 29, 28, 28, 28, 28, 28, 20, 28, 20, 18, 5, 25, 29, 35, 36, 27, 27, 27, 30, 30, 30, 29, 28, 37, 38, 39, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 10, 20, 28, 10, 28, 10, 20, 28, 20, 29, 13, 37, 37, 35, 29, 25, 27, 20, 25, 18, 40, 30, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 33, 34, 10, 10, 28, 10, 10, 20, 28, 39, 41, 41, 29, 35, 25, 27, 10, 10, 28, 10, 3, 37, 13, 13, 29, 28, 42, 42, 42, 28, 20, 40, 10, 29, 3, 27, 27, 41, 29, 37, 37, 28, 41, 41, 42, 42, 41, 42, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
